name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Deploy to Development"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: archie-465300
  GAR_LOCATION: us-west1
  REPOSITORY: archie
  SERVICE: archie
  REGION: us-west1-a

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker for GAR
      run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Install kustomize
      run: |
        if ! command -v kustomize &> /dev/null; then
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
        fi

    - name: Get cluster credentials
      run: |
        gcloud container clusters get-credentials archie-staging --zone=$REGION
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True

    - name: Create namespaces
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        kubectl apply -f k8s/setup-namespaces.yaml

    - name: Deploy to GKE
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        cd k8s/staging
        kustomize edit set image archie-app=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:${{ github.sha }}
        kubectl apply -k .

    - name: Verify deployment
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        echo "Waiting for deployment rollout to complete..."
        kubectl rollout status deployment/archie-deployment -n staging --timeout=300s
        
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app=archie -n staging --timeout=300s
        
        echo "Checking pod status..."
        kubectl get pods -n staging
        
        echo "Checking if any pods are in error states..."
        # Check for pods with error states (exclude successful terminations)
        ERROR_PODS=$(kubectl get pods -n staging --field-selector=status.phase!=Succeeded,status.phase!=Running -o jsonpath='{.items[*].metadata.name}')
        if [ ! -z "$ERROR_PODS" ]; then
          echo "Found pods in error states: $ERROR_PODS"
          kubectl describe pods $ERROR_PODS -n staging
          exit 1
        fi
        
        # Check for waiting containers (ImagePullBackOff, CrashLoopBackOff, etc.)
        WAITING_CONTAINERS=$(kubectl get pods -n staging -o jsonpath='{range .items[*]}{.metadata.name}{": "}{range .status.containerStatuses[*]}{.state}{"\n"}{end}{end}' | grep -E 'waiting.*BackOff|waiting.*Error' || true)
        if [ ! -z "$WAITING_CONTAINERS" ]; then
          echo "Found containers in waiting/error states:"
          echo "$WAITING_CONTAINERS"
          kubectl describe pods -n staging
          exit 1
        fi
        
        echo "Testing API endpoint..."
        kubectl port-forward -n staging svc/archie-service 8080:80 &
        sleep 5
        curl -f http://localhost:8080/api/time || exit 1
        pkill -f "kubectl port-forward"
        
        echo "Deployment verification successful!"
        kubectl get services -n staging